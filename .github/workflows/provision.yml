name: Provision cloud infrastructure and install VTAS

on: workflow_dispatch

permissions:
  id-token: write
  contents: read

jobs:
  provision-infrastructure:
    name: Provision VTAS infrastructure
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
    outputs:
      vtas_ip_addr: ${{ steps.vtas.outputs.vtas_ip_addr }}
      repo_ip_addr: ${{ steps.repo.outputs.repo_ip_addr }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Initialise plan for core infrastructure
        working-directory: ./terraform/core
        run: terraform init
      - name: Apply plan for core infrastructure
        working-directory: ./terraform/core
        run: terraform apply --auto-approve
      - name: Set vtas host address variable
        id: vtas
        working-directory: ./terraform/core
        run: |
          TEMP=$(terraform output vtas_host_ip_addr)
          VTAS_HOST_IP_ADDR=$(echo $TEMP | tr -d '"')
          #echo "::set-output name=vtas_ip_addr::${VTAS_HOST_IP_ADDR}"
          echo "vtas_ip_addr=${VTAS_HOST_IP_ADDR}" >> $GITHUB_OUTPUT
          echo vtas_ip_addr=${VTAS_HOST_IP_ADDR}
      - name: Initialise plan for ephemeral infrastructure
        working-directory: ./terraform/repo
        run: terraform init
      - name: Apply plan for ephemeral infrastructure
        working-directory: ./terraform/repo
        run: terraform apply --auto-approve
      - name: Set repo host address variable
        id: repo
        working-directory: ./terraform/repo
        run: |
          TEMP=$(terraform output repo_host_ip_addr)
          REPO_HOST_IP_ADDR=$(echo $TEMP | tr -d '"')
          # echo "::set-output name=repo_ip_addr::${REPO_HOST_IP_ADDR}"
          echo "repo_ip_addr=${REPO_HOST_IP_ADDR}" >> $GITHUB_OUTPUT  
          echo repo_ip_addr=${REPO_HOST_IP_ADDR}

  install-vtas:
    name: Install VTAS and drivers
    needs: [provision-infrastructure]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup Ansible on GHR
        run: |
          sudo apt update
          sudo apt install software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible -y
      - name: 'Create hosts file'
        working-directory: ./ansible
        env:
          VTAS_HOST: ${{needs.provision-infrastructure.outputs.vtas_ip_addr}}
          REPO_HOST: ${{needs.provision-infrastructure.outputs.repo_ip_addr}}
        run: |
          echo [linux] > hosts
          echo repository ansible_host=${REPO_HOST} >> hosts
          echo vtas ansible_host=${VTAS_HOST} >> hosts
          echo "" >> hosts
          cat hosts          
      - name: Install VTAS and start on host
        working-directory: ./ansible
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.DEMO_CLIENT_ID }}
          REPO_HOST: ${{needs.provision-infrastructure.outputs.repo_ip_addr}}
        run: |
          ansible-playbook -i hosts -v vtas.yml -e "install_vtas_repository_host=${REPO_HOST}"

  decommission-ephemeral-infrastructure:
    name: Decommission ephemeral infrastructure
    needs: [install-vtas]
    runs-on: ubuntu-latest
#    environment: DEMO
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
      - name: Initialise infrastructure plan
        working-directory: ./terraform/repo
        run: terraform init
      - name: Apply infrastructure plan
        working-directory: ./terraform/repo
        run: terraform destroy --auto-approve
    